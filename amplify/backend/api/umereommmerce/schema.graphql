input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
}

type User @model {
  id: ID!
  email: String
  firstName: String
  lastName: String
  Address: String
  createdAt: String
  updatedAt: String
  AddedProduct: [AddProduct] @hasMany
  CartItems: [CartItem] @hasMany
  Reviews: [Review] @hasMany
}

type AddProduct @model {
  id: ID!
  category: String
  color: [String]
  description: String
  discountType: String
  discountValue: Float
  discountedPrice: Float
  imageKeys: [String]
  price: Float
  productName: String
  size: [String]
  createdAt: String
  updatedAt: String
  user: User @belongsTo(fields: ["userId"])
  userId: ID
  CartItems: [CartItem] @hasMany
  Reviews: [Review] @hasMany
}

type CartItem @model {
  id: ID!
  productName: String
  quantity: Int
  price: Float
  size: [String]
  color: [String]
  imageKeys: String
  createdAt: String
  updatedAt: String
  product: AddProduct @belongsTo(fields: ["productId"])
  productId: ID
  user: User @belongsTo(fields: ["userId"])
  userId: ID
}

type Review @model {
  id: ID!
  rating: Int
  text: String
  createdAt: String
  updatedAt: String
  product: AddProduct @belongsTo(fields: ["productId"])
  productId: ID
  user: User @belongsTo(fields: ["userId"])
  userId: ID
}

type EmailResponse {
  message: String
  success: Boolean
}

type Mutation {
  customAddProduct(input: CreateAddProductInput): AddProduct @function(name: "calculateCartItemPriceLambda-dev")

  sendEmail(name: String!, email: String!, phone: String, message: String!): EmailResponse
    @function(name: "umerSESecommmerce-dev")
}

input CreateAddProductInput {
  category: String
  color: [String]
  description: String
  discountType: String
  discountValue: Float
  discountedPrice: Float
  imageKeys: [String]
  price: Float
  productName: String
  size: [String]
  userId: ID
}
